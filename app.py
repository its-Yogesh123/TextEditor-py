# Hey there! This code is Generated by Yogesh Kumar.
# for contact yogesh.developer9@gmail.com
from tkinter import *
from tkinter import ttk
from tkinter import font,colorchooser,messagebox,filedialog
import os
win=Tk()
# ---------images
# left_image=PhotoImage(file="./media/left.png")
# center_image=PhotoImage(file="./media/center.png")
# right_image=PhotoImage(file="./media/right.png")
color_image=PhotoImage(file="./media/color.png")

win.title("EditPad")
win.iconbitmap(r"./media/logo.icns")
win.iconbitmap()
win.geometry("800x400")
# ------- Main Menu  Section ----
mainMenu=Menu(win)
file=Menu(mainMenu,tearoff=False)
edit=Menu(mainMenu,tearoff=False)
selection=Menu(mainMenu,tearoff=False)
view=Menu(mainMenu,tearoff=False)
theme=Menu(mainMenu,tearoff=False)
help=Menu(mainMenu,tearoff=False)

# -------------------- tool bar ----------------------
toolBar=Frame(win)
toolBar.pack(padx=2,fill=X,side=TOP)
# --
fontFamilies=font.families()
fontStore=StringVar()
fontBox=ttk.Combobox(toolBar,width=20,textvariable=fontStore,state="readonly")
fontBox.set("AppleBraille")
fontBox['value']=fontFamilies
fontBox.grid(row=0,rowspan=2,column=0)
# ---
fontRange=tuple(range(1,100))
fontSize=StringVar()
fontsize=ttk.Combobox(toolBar,width=20,textvariable=fontSize,state="readonly")
fontsize.set(11)
fontsize['value']=fontRange
fontsize.grid(row=0,rowspan=2,column=1)
# ---
boldButton=ttk.Button(toolBar,width=1,text="B",cursor="pointinghand")
boldButton.grid(padx=2,row=0,column=2)
# --
iButton=ttk.Button(toolBar,width=1,text="I",cursor="pointinghand")
iButton.grid(padx=2,row=0,column=3)
# --
uButton=ttk.Button(toolBar,width=1,text="U",cursor="pointinghand")
uButton.grid(padx=2,row=0,column=4)
# ------ aliginment buttons
leftButton=ttk.Button(toolBar,width=1,text="L",cursor="pointinghand")
leftButton.grid(row=1,column=2)
centerButton=ttk.Button(toolBar,width=1,text="C",cursor="pointinghand")
centerButton.grid(row=1,column=3)
rightButton=ttk.Button(toolBar,width=1,text="R",cursor="pointinghand")
rightButton.grid(row=1,column=4)
colorButton=Button(toolBar,background="black",image=color_image,command=LEFT,cursor="pointinghand")
colorButton.grid(row=0,rowspan=2,column=8)
# ****************************** End Tool Bar ********************************8
# ------------------------ texing area----------------
textFrame=Frame(win)
textFrame.pack(padx=5,fill=BOTH,expand=TRUE)
textFrame.pack_propagate(False)
text=Text(textFrame,highlightthickness=0,undo=True)
text.config(wrap="word",relief="flat")
# --- scroll bar---
scrolBar=ttk.Scrollbar(win,orient=VERTICAL,command=text.yview)
scrolBar.pack(fill=Y,side=RIGHT)
text.pack(fill=BOTH,expand=True)
text.config(yscrollcommand=scrolBar.set)
# ---- global variables
font_family="AppleBraille"
font_size=11
styleTuple=["normal","normal","normal"]
text.config(font=(font_family,font_size))
def fontColor():
    color=colorchooser.askcolor()
    text.config(foreground=color[1])
def fontUpdate():
    global font_family,font_size,styleTuple
    styleTuple=["normal","normal","normal"]
    font_family=fontStore.get()
    font_size=fontSize.get()
    text.config(font=(font_family,font_size))
def style(i):
    global styleTuple
    if(i==0):
        styleTuple[0]="bold" if styleTuple[0]=='normal' else "normal"
    elif(i ==1):
        styleTuple[1]="italic" if styleTuple[1]=='normal' else "normal"
    else:
        styleTuple[2]="underline" if styleTuple[2]=='normal' else "normal"
    text.config(font=(font_family,font_size,f"{styleTuple[2]} {styleTuple[1]} {styleTuple[0]}" ))
# -- alignment functionality
def alignment(value):
    if(len(text.tag_names())>=2):
        text.tag_delete(text.tag_names()[1])
        text.update_idletasks()
    text.tag_config(f"{value}",justify=f"{value}")
    text.tag_add(f"{value}","1.0","1.end")
colorButton.bind("<Button-1>",lambda e:fontColor())
fontBox.bind("<<ComboboxSelected>>",lambda e:fontUpdate())
fontsize.bind("<<ComboboxSelected>>",lambda e:fontUpdate())
boldButton.bind("<Button-1>",lambda e:style(0))
iButton.bind("<Button-1>",lambda e:style(1))
uButton.bind("<Button-1>",lambda e:style(2))
leftButton.bind("<Button-1>",lambda e:alignment("left"))
centerButton.bind("<Button-1>",lambda e:alignment("center"))
rightButton.bind("<Button-1>",lambda e:alignment("right"))
# ----- status bar--------
statusBar=Frame(win)
statusBar.pack(fill=X,side=BOTTOM)
statusContent=Label(statusBar,text="0:0")
statusContent.pack(fill=X)
# ********************** End Status Bar *******************
# --------------------- Command adding to Menus ------------------
# ---------- menus functionality 

# ------- File Menu function ----------

filePath=os.path.join(os.getcwd(),"Untitled.txt")
win.title(f"{os.path.basename(filePath)} - Edited")
def newFun():
    global filePath
    text.delete(1.0,END)
    filePath=os.path.join(os.getcwd(),"Untitled.txt")
    i=1
    while(os.path.exists(filePath)):
        filePath=os.path.join(os.getcwd(),f"Untitled{i}.txt")
        i+=1
    win.title(f"{os.path.basename(filePath)} - Edited")
def openFun():
    global filePath
    temp=filedialog.askopenfilename()
    if(temp!=""):
        filePath=temp
        text.delete(1.0,END)
        with open(f"{filePath}","r") as file:
            text.insert(1.0,file.read())
        win.title(os.path.basename(filePath))
def saveAsFun():
    global filePath
    newName=filedialog.asksaveasfilename()
    data=text.get(1.0,END)
    if(len(newName) !=0):
        with open(newName,"w") as file:
            file.write(data)
            filePath=newName
    win.title(os.path.basename(filePath))
def saveFun():
    data=text.get(1.0,END)
    if(os.path.exists(filePath)):
        with open(filePath,"w") as file:
            file.write(data)
    else:
        saveAsFun()
    win.title(os.path.basename(filePath))

# ----------- Edit Menu Funcito ---------
toolVal=BooleanVar()
toolVal.set(1)
stateVal=BooleanVar()
stateVal.set(1)
def viewFunction():
    if(toolVal.get() and  stateVal.get()):
        toolBar.pack_forget()
        textFrame.pack_forget()
        statusBar.pack_forget()
        toolBar.pack(padx=2,fill=X,side=TOP)
        textFrame.pack(fill=BOTH,expand=True,padx=5)
        statusBar.pack(fill=X,side=BOTTOM)
    elif toolVal.get():
        toolBar.pack_forget()
        textFrame.pack_forget()
        statusBar.pack_forget()
        toolBar.pack(padx=2,fill=X,side=TOP)
        textFrame.pack(fill=BOTH,expand=True,padx=5)
    elif stateVal.get():
        toolBar.pack_forget()
        textFrame.pack_forget()
        statusBar.pack_forget()
        textFrame.pack(fill=BOTH,expand=True,padx=5)
        statusBar.pack(fill=X,side=BOTTOM)
    else:
        toolBar.pack_forget()
        textFrame.pack_forget()
        statusBar.pack_forget()
        textFrame.pack(fill=BOTH,expand=True,padx=5)
def clear():
    text.delete(1.0,END)
def quite():
    data=text.get(1.0,END)
    data=data.rstrip("\n")
    if os.path.exists(filePath):
        with open(filePath,"r") as file:
            if data==file.read().rstrip("\n"):
                win.destroy()
            else:
                ask=messagebox.askyesnocancel(message=f"Do you want to save changes to {filePath}??")
                if(ask==True):
                    with open(filePath,'w') as writeFile:
                        writeFile.write(data)
                    win.destroy()
                elif ask ==False:
                    win.destroy()
                else:
                    pass
    else:
        if len(data)==0:
            win.destroy()
        else:
            saveFun()
# --------- find and replace -------
def find():
    findWin=Toplevel(win)
    startPos="1.0"
    endPos=END
    currSelected=1
    total=0
    def search(*args):
        nonlocal endPos,total
        toSearch=entry.get()
        content=text.get(1.0,END)
        total=content.count(toSearch) if len(toSearch)>0 else 0
        text.tag_delete("highlight")
        if(total>0 ):
            startIndex=text.search(toSearch,startPos,stopindex=END)
            endIndex=f"{startIndex}+{len(toSearch)}c"
            endPos=endIndex
            text.tag_add("highlight",startIndex,endIndex)
            text.tag_config("highlight",background="yellow")
            cLabel.config(text=f"{currSelected} of {total}")
        else:
            cLabel.config(text=f"{0} of {total}")
    def up(a):
        nonlocal startPos,currSelected
        if a==0:
            if(currSelected >1):
                currSelected-=1
                startPos="1.0"
                for i in range(1,currSelected):
                    startIndex=text.search(entryStore.get(),startPos,stopindex=END)
                    endIndex=f"{startIndex}+{len(entryStore.get())}c"
                    startPos=endIndex
        else :
            if(currSelected < total):
                startPos=endPos
                currSelected+=1
        search()
    def exit():
        text.tag_delete("highlight")
        findWin.destroy()
    label=Label(findWin,text="Find")
    label.grid(row=0,column=0)
    entryStore=StringVar()
    entryStore.trace_add("write",search)
    entry=Entry(findWin,textvariable=entryStore)
    entry.grid(row=0,column=1)
    # --
    cLabel=Label(findWin,text="0 of 0")
    cLabel.grid(row=0,column=2)
    upButton=Button(findWin,text="<",cursor="pointinghand",activebackground=findWin["bg"],command=lambda :up(0))
    upButton.grid(row=0,column=3)
    lowButton=Button(findWin,text=">",cursor="pointinghand",activebackground=win["bg"],command=lambda :up(1))
    lowButton.grid(row=0,column=4)
    # ---
    findWin.protocol("WM_DELETE_WINDOW",exit)
    findWin.mainloop()
def replaceFun():
    replaceWin=Toplevel(win)
    startPos="1.0"
    endPos=END
    currSelected=1
    total=0
    def search(*args):
        nonlocal endPos,total
        toSearch=entry1.get()
        content=text.get(1.0,END)
        total=content.count(toSearch) if len(toSearch)>0 else 0
        text.tag_delete("highlight")
        if(total>0 ):
            startIndex=text.search(toSearch,startPos,stopindex=END)
            endIndex=f"{startIndex}+{len(toSearch)}c"
            endPos=endIndex
            text.tag_add("highlight",startIndex,endIndex)
            text.tag_config("highlight",background="yellow")
            cLabel.config(text=f"{currSelected} of {total}")
        else:
            cLabel.config(text=f"{0} of {total}")
    def up(a):
        nonlocal startPos,currSelected
        if a==0:
            if(currSelected >1):
                currSelected-=1
                startPos="1.0"
                for i in range(1,currSelected):
                    startIndex=text.search(entryStore.get(),startPos,stopindex=END)
                    endIndex=f"{startIndex}+{len(entryStore.get())}c"
                    startPos=endIndex
        else :
            if(currSelected < total):
                startPos=endPos
                currSelected+=1
        search()
    def replace():
        if(len(text.tag_ranges("highlight"))>0):
            startIndex=text.tag_ranges("highlight")[0]
            endIndex=text.tag_ranges("highlight")[1]
            if(len(entryStore2.get())>0):
                text.delete(startIndex,endIndex)
                text.insert(startIndex,entryStore2.get())
            search()
    def replaceAll():
        content=text.get(1.0,END)
        if(len(entryStore2.get()) >0 and len(entryStore.get())>0):
            newContent=content.replace(entryStore.get(),entry2.get())
            text.insert("1.0",newContent)
            text.tag_delete("highlight")
    def exit():
        text.tag_delete("highlight")
        replaceWin.destroy()
    label=Label(replaceWin,text="Find")
    label.grid(row=0,column=0)
    label1=Label(replaceWin,text="Replace")
    label1.grid(row=1,column=0)
    entryStore=StringVar()
    entryStore.trace_add("write",search)
    entry1=Entry(replaceWin,textvariable=entryStore)
    entry1.grid(row=0,column=1)
    entryStore2=StringVar()
    entry2=Entry(replaceWin,textvariable=entryStore2)
    entry2.grid(row=1,column=1)
    # --
    cLabel=Label(replaceWin,text="0 of 0")
    cLabel.grid(row=0,column=2)
    upButton=Button(replaceWin,text="<",cursor="pointinghand",command=lambda :up(0))
    upButton.grid(row=0,column=3)
    lowButton=Button(replaceWin,text=">",cursor="pointinghand",command=lambda :up(1))
    lowButton.grid(row=0,column=4)
    # --
    reButton=Button(replaceWin,text="Replace",command=replace)
    reButton.grid(row=2,column=0)
    reAllButton=Button(replaceWin,text="Replace All",command=replaceAll)
    reAllButton.grid(row=2,column=1)
    # --
    # ---
    replaceWin.protocol("WM_DELETE_WINDOW",exit)
    replaceWin.mainloop()


# -------
# -- function status bar ---
def update():
    if(text.edit_modified()):
        words=len(text.get(1.0,"1.end").split(" "))
        characters=len(text.get(1.0,"end-1c"))
        statusContent.config(text=f"{words}:{characters}")
        content=text.get(1.0,END)
        if(os.path.exists(filePath)):
            with open(filePath,"r") as file:
                if(content.rstrip('\n')!=file.read().rstrip("\n")):
                    win.title(f"{os.path.basename(filePath)} - Edited")
                else:
                    win.title(f"{os.path.basename(filePath)}")
    text.edit_modified(False)
text.bind("<<Modified>>",lambda e: update())
# ************************* functionality END ***********************
#   command(mac) =control(windows)
#   option(mac)=alt(windows)
file.add_command(label="New",accelerator="command+N",command=newFun)     # how to change width of this menu
file.add_command(label="Open",accelerator="command+O",command=openFun)
file.add_command(label="Save",accelerator="command+S",command=saveFun)
file.add_command(label="Save As",accelerator="command+shift+S",command=saveAsFun)
file.add_command(label="Quit",accelerator="command+Q",command=quite)
# --
edit.add_command(label="Undo",accelerator="command+z",command=lambda :text.edit_undo())
edit.add_command(label="Redo",accelerator="command+shift+z",command=lambda :text.edit_redo())
edit.add_separator()
edit.add_command(label="Cut",accelerator="command+x",command=lambda : text.event_generate("<Command x>"))
edit.add_command(label="Copy",accelerator="command+c",command=lambda : text.event_generate("<Command c>"))
edit.add_command(label="Paste",accelerator="command+v",command=lambda : text.event_generate("<Command v>"))
edit.add_command(label="Clear",accelerator="command+.",command=clear)
edit.add_separator()
edit.add_command(label="Find",accelerator="command+f",command=find)
edit.add_command(label="Replace",accelerator="option+f",command=replaceFun)
# --
view.add_checkbutton(label="Toolbar",state="active",variable=toolVal,accelerator="command+option+t",command=viewFunction)
view.add_checkbutton(label="Statusbar",state='active',variable=stateVal,accelerator="command+option+s",command=viewFunction)
def themeFun():
    colorTup=colorchooser.askcolor()
    text.config(background=colorTup[1])
theme.add_command(label="Theme",command=themeFun)
# --
help.add_command(label="Privacy and License")
help.add_command(label="Shortcuts Keys")
help.add_command(label="About")
help.add_command(label="Ask Help")
# ---- Menu cascading-----------
mainMenu.add_cascade(menu=file,label="File")
mainMenu.add_cascade(menu=edit,label="Edit")
mainMenu.add_cascade(menu=selection,label="Selection")
mainMenu.add_cascade(menu=view,label="View")
mainMenu.add_cascade(menu=theme,label="Theme")
mainMenu.add_cascade(menu=help,label="Help")


# --- shortcut keys binding
text.bind("<Command-s>",lambda e:saveFun())
text.bind("<Option-Command-s>",lambda e:saveAsFun())
text.bind("<Command-n>",lambda e:newFun())
text.bind("<Command-o>",lambda e:openFun())
text.bind("<Command-.>",lambda e: clear())
text.bind("<Command-f>",lambda e: find())
text.bind("<Command-Option-KeyPress-f>",lambda e:replaceFun())
win.config(menu=mainMenu)
win.protocol("WM_DELETE_WINDOW",quite)
win.mainloop()